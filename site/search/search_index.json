{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Venice Python SDK","text":"<p>A lightweight and extensible Python SDK for interacting with Venice's LLM endpoints.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Simple and intuitive interface</li> <li>\ud83d\udcac Support for chat completions</li> <li>\ud83c\udf0a Streaming responses</li> <li>\ud83d\udee0\ufe0f Function calling support</li> <li>\ud83d\udd0d Web search integration</li> <li>\ud83c\udfad Character personas</li> <li>\u26a1 Error handling with retries</li> <li>\ud83d\udcdd Type hints and documentation</li> <li>\ud83d\udd04 OpenAI API compatibility (optional)</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation</li> <li>Quick Start</li> <li>API Reference</li> <li>Advanced Usage</li> <li>Configuration</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<pre><code>from venice_sdk import HTTPClient, ChatAPI\n\n# Initialize the client\nclient = HTTPClient()\n\n# Create a chat API instance\nchat = ChatAPI(client)\n\n# Send a message\nresponse = chat.complete(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    model=\"llama-3.3-70b\"\n)\n\nprint(response[\"choices\"][0][\"message\"][\"content\"]) \n</code></pre>"},{"location":"#why-venice-sdk","title":"Why Venice SDK?","text":"<p>The Venice Python SDK provides a simple and intuitive interface for interacting with Venice's LLM endpoints. It's designed to be:</p> <ul> <li>Easy to use: Simple API that follows Python best practices</li> <li>Extensible: Built with future endpoints in mind</li> <li>Type-safe: Full type hints and documentation</li> <li>Reliable: Built-in error handling and retries</li> <li>Compatible: Optional OpenAI API compatibility layer</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. </p>"},{"location":"configuration/","title":"Configuration","text":"<p>The Venice SDK can be configured in several ways to suit your needs.</p>"},{"location":"configuration/#api-key-configuration","title":"API Key Configuration","text":"<p>There are three ways to configure your API key:</p>"},{"location":"configuration/#1-environment-variables","title":"1. Environment Variables","text":"<p>Set the <code>VENICE_API_KEY</code> environment variable:</p> <pre><code>export VENICE_API_KEY=your-api-key\n</code></pre>"},{"location":"configuration/#2-command-line-interface","title":"2. Command Line Interface","text":"<p>Use the CLI to set your API key:</p> <pre><code>venice auth your-api-key\n</code></pre> <p>This will create or update a <code>.env</code> file in your current directory.</p>"},{"location":"configuration/#3-direct-initialization","title":"3. Direct Initialization","text":"<p>Pass your API key directly when initializing the client:</p> <pre><code>from venice_sdk import Config, HTTPClient\n\nconfig = Config(api_key=\"your-api-key\")\nclient = HTTPClient(config)\n</code></pre>"},{"location":"configuration/#client-configuration","title":"Client Configuration","text":"<p>The <code>Config</code> can be constructed with several options:</p> <pre><code>from venice_sdk import Config, HTTPClient\n\nclient = HTTPClient(\n    Config(\n        api_key=\"your-api-key\",               # Optional if set via env or .env\n        base_url=\"https://api.venice.ai/api/v1\", # Defaults internally if omitted\n        timeout=30,\n        max_retries=3,\n        retry_delay=1,\n    )\n)\n</code></pre>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":"Option Type Default Description <code>api_key</code> str None Your Venice API key <code>base_url</code> str \"https://api.venice.ai/api/v1\" Base URL for API requests <code>timeout</code> int 30 Request timeout in seconds <code>max_retries</code> int 3 Maximum number of retry attempts <code>retry_delay</code> int 1 Initial delay between retries (seconds)"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>All available environment variables:</p> Variable Description <code>VENICE_API_KEY</code> Your Venice API key <code>VENICE_BASE_URL</code> Base URL for API requests <code>VENICE_TIMEOUT</code> Request timeout in seconds <code>VENICE_MAX_RETRIES</code> Maximum number of retries <code>VENICE_RETRY_DELAY</code> Initial delay between retries"},{"location":"configuration/#using-env-files","title":"Using .env Files","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>VENICE_API_KEY=your-api-key\nVENICE_BASE_URL=https://api.venice.ai/v1\nVENICE_TIMEOUT=30\nVENICE_MAX_RETRIES=3\nVENICE_RETRY_DELAY=1\n</code></pre> <p>Then load it in your code:</p> <pre><code>from dotenv import load_dotenv\nfrom venice_sdk import HTTPClient\n\nload_dotenv()  # Load environment variables from .env\nclient = HTTPClient()  # Will use values from env/.env\n</code></pre>"},{"location":"configuration/#configuration-precedence","title":"Configuration Precedence","text":"<p>The SDK uses the following precedence order for configuration (highest to lowest):</p> <ol> <li>Direct initialization arguments</li> <li>Environment variables</li> <li><code>.env</code> file values</li> <li>Default values</li> </ol>"},{"location":"configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Development: Use <code>.env</code> files for local development</li> <li>Production: Use environment variables</li> <li>Testing: Use direct initialization</li> <li>CI/CD: Use environment variables or secrets management</li> </ol>"},{"location":"configuration/#related","title":"Related","text":"<ul> <li>Quick Start</li> <li>API Reference</li> <li>Advanced Usage </li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installing-the-sdk","title":"Installing the SDK","text":"<p>You can install the Venice SDK using pip:</p> <pre><code>pip install venice-sdk\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to the SDK or run the tests, you'll need to install it in development mode:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/venice-sdk.git\ncd venice-sdk\n\n# Install in development mode with all dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>The SDK has several optional dependencies that you can install based on your needs:</p> <pre><code># For testing\npip install -e \".[test]\"\n\n# For documentation\npip install -e \".[docs]\"\n\n# For all optional dependencies\npip install -e \".[all]\"\n</code></pre>"},{"location":"installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>You can verify that the SDK is installed correctly by running:</p> <pre><code>import venice_sdk\nprint(venice_sdk.__version__)\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>After installation, you'll need to configure your API key. You can do this in several ways:</p> <ol> <li> <p>Environment variables:    <pre><code>export VENICE_API_KEY=\"your-api-key\"\n</code></pre></p> </li> <li> <p><code>.env</code> file:    <pre><code>VENICE_API_KEY=your-api-key\n</code></pre></p> </li> <li> <p>Direct initialization:    <pre><code>from venice_sdk import HTTPClient\nclient = HTTPClient()  # Reads config from environment or .env\n</code></pre></p> </li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Get started with the SDK</li> <li>Configuration - Learn more about configuration options</li> <li>API Reference - Explore the SDK's API </li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Venice SDK quickly.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip install venice-sdk\n</code></pre>"},{"location":"quickstart/#authentication","title":"Authentication","text":"<p>Set up your API key using either environment variables or the CLI:</p> <pre><code># Using environment variables\nexport VENICE_API_KEY=your-api-key\n\n# Or using the CLI\nvenice auth your-api-key\n</code></pre>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of using the SDK for chat completion:</p> <pre><code>from venice_sdk import HTTPClient, ChatAPI\n\n# Initialize the client\nclient = HTTPClient()\n\n# Create a chat API instance\nchat = ChatAPI(client)\n\n# Send a message\nresponse = chat.complete(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    model=\"llama-3.3-70b\"\n)\n\nprint(response[\"choices\"][0][\"message\"][\"content\"]) \n</code></pre>"},{"location":"quickstart/#streaming-responses","title":"Streaming Responses","text":"<p>For streaming responses:</p> <pre><code>for chunk in chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"Tell me a story\"}],\n    model=\"llama-3.3-70b\",\n    stream=True\n):\n    if chunk:\n        print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"quickstart/#function-calling","title":"Function Calling","text":"<p>Using tools/function calling:</p> <pre><code>tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    }\n]\n\nresponse = chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in San Francisco?\"}],\n    model=\"llama-3.3-70b\",\n    tools=tools\n)\n\nif response.choices[0].message.tool_calls:\n    for tool_call in response.choices[0].message.tool_calls:\n        print(f\"Function: {tool_call.function.name}\")\n        print(f\"Arguments: {tool_call.function.arguments}\")\n</code></pre>"},{"location":"quickstart/#model-discovery","title":"Model Discovery","text":"<p>List available models:</p> <pre><code>from venice_sdk import get_models\n\nmodels = get_models(client)\nfor model in models:\n    print(f\"{model.name} ({model.id})\")\n    print(f\"  Supports function calling: {model.capabilities.supports_function_calling}\")\n    print(f\"  Supports web search: {model.capabilities.supports_web_search}\")\n    print(f\"  Context tokens: {model.capabilities.available_context_tokens}\")\n</code></pre>"},{"location":"quickstart/#error-handling","title":"Error Handling","text":"<p>Handle errors gracefully:</p> <pre><code>from venice_sdk.errors import VeniceAPIError, RateLimitError\n\ntry:\n    response = chat.complete(...)\nexcept RateLimitError:\n    print(\"Rate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>See Advanced Usage for more features</li> <li>View Examples for more code samples </li> </ul>"},{"location":"advanced/error_handling/","title":"Error Handling","text":"<p>The Venice SDK provides a comprehensive error handling system to help you manage and respond to various types of errors that may occur during API interactions.</p>"},{"location":"advanced/error_handling/#error-types","title":"Error Types","text":"<p>The SDK defines several exception types:</p> <pre><code>from venice_sdk.errors import (\n    VeniceAPIError,      # Base exception\n    UnauthorizedError,   # Authentication errors\n    RateLimitError,      # Rate limit exceeded\n    InvalidRequestError, # Invalid request parameters\n    APIError            # Other API errors\n)\n</code></pre>"},{"location":"advanced/error_handling/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>from venice_sdk import HTTPClient\nfrom venice_sdk.errors import VeniceAPIError, RateLimitError\n\nclient = HTTPClient()\n\ntry:\n    response = client.request(...)\nexcept RateLimitError:\n    print(\"Rate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"advanced/error_handling/#specific-error-handling","title":"Specific Error Handling","text":"<pre><code>from venice_sdk.errors import UnauthorizedError, InvalidRequestError\n\ntry:\n    response = client.request(...)\nexcept UnauthorizedError:\n    print(\"Authentication failed. Please check your API key.\")\nexcept InvalidRequestError as e:\n    print(f\"Invalid request: {e}\")\n    if e.code == \"INVALID_MODEL\":\n        print(\"Please check the model ID and try again.\")\nexcept VeniceAPIError as e:\n    print(f\"Other API error: {e}\")\n</code></pre>"},{"location":"advanced/error_handling/#retry-logic","title":"Retry Logic","text":"<p>The SDK includes built-in retry logic for certain types of errors:</p> <pre><code>from venice_sdk import HTTPClient\n\n# Configure retry behavior\nclient = HTTPClient(\n    # Configure via environment or pass a Config if needed\n)\n\ntry:\n    response = client.request(...)\nexcept VeniceAPIError as e:\n    print(f\"Request failed after retries: {e}\")\n</code></pre>"},{"location":"advanced/error_handling/#custom-retry-strategy","title":"Custom Retry Strategy","text":"<p>You can implement a custom retry strategy:</p> <pre><code>import time\nfrom venice_sdk.errors import VeniceAPIError\n\ndef custom_retry(func, max_retries=3, initial_delay=1):\n    delay = initial_delay\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except VeniceAPIError as e:\n            if attempt == max_retries - 1:\n                raise\n            print(f\"Attempt {attempt + 1} failed. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n            delay *= 2  # Exponential backoff\n\n# Usage\nresponse = custom_retry(lambda: client.request(...))\n</code></pre>"},{"location":"advanced/error_handling/#error-codes","title":"Error Codes","text":"<p>The SDK maps common error codes to specific exceptions:</p> Error Code Exception Description <code>UNAUTHORIZED</code> <code>UnauthorizedError</code> Invalid or missing API key <code>RATE_LIMIT_EXCEEDED</code> <code>RateLimitError</code> Rate limit exceeded <code>INVALID_MODEL</code> <code>InvalidRequestError</code> Invalid model ID <code>INVALID_REQUEST</code> <code>InvalidRequestError</code> Invalid request parameters Others <code>APIError</code> Other API errors"},{"location":"advanced/error_handling/#best-practices","title":"Best Practices","text":"<ol> <li>Always Handle Errors: Wrap API calls in try-except blocks.</li> <li>Specific Error Types: Catch specific error types when possible.</li> <li>Retry Strategy: Implement appropriate retry logic for transient errors.</li> <li>Error Logging: Log errors for debugging and monitoring.</li> <li>User Feedback: Provide clear error messages to users.</li> </ol>"},{"location":"advanced/error_handling/#example-comprehensive-error-handling","title":"Example: Comprehensive Error Handling","text":"<pre><code>import logging\nfrom venice_sdk.errors import (\n    VeniceAPIError,\n    UnauthorizedError,\n    RateLimitError,\n    InvalidRequestError\n)\n\nclass APIHandler:\n    def __init__(self, client: VeniceClient):\n        self.client = client\n        self.logger = logging.getLogger(__name__)\n\n    def make_request(self, endpoint: str, **kwargs):\n        try:\n            return self.client.request(endpoint, **kwargs)\n        except UnauthorizedError:\n            self.logger.error(\"Authentication failed\")\n            raise\n        except RateLimitError:\n            self.logger.warning(\"Rate limit exceeded\")\n            # Implement retry logic\n            return self._retry_request(endpoint, **kwargs)\n        except InvalidRequestError as e:\n            self.logger.error(f\"Invalid request: {e}\")\n            if e.code == \"INVALID_MODEL\":\n                return self._handle_invalid_model(e)\n            raise\n        except VeniceAPIError as e:\n            self.logger.error(f\"API error: {e}\")\n            raise\n\n    def _retry_request(self, endpoint: str, **kwargs):\n        max_retries = 3\n        delay = 1\n        for attempt in range(max_retries):\n            try:\n                return self.client.request(endpoint, **kwargs)\n            except RateLimitError:\n                if attempt == max_retries - 1:\n                    raise\n                self.logger.warning(f\"Retry {attempt + 1} failed\")\n                time.sleep(delay)\n                delay *= 2\n\n    def _handle_invalid_model(self, error: InvalidRequestError):\n        # Implement model fallback logic\n        pass\n\n# Usage\nhandler = APIHandler(client)\ntry:\n    response = handler.make_request(\"/chat/completions\", ...)\nexcept VeniceAPIError as e:\n    print(f\"Request failed: {e}\")\n</code></pre>"},{"location":"advanced/error_handling/#related","title":"Related","text":"<ul> <li>Client API - Core HTTP client functionality</li> <li>Chat API - Chat completion functionality</li> <li>Models API - Model discovery and management </li> </ul>"},{"location":"advanced/function_calling/","title":"Function Calling","text":"<p>The Venice SDK supports function calling, allowing models to request the execution of specific functions based on user input.</p>"},{"location":"advanced/function_calling/#basic-function-calling","title":"Basic Function Calling","text":"<pre><code>from venice_sdk import HTTPClient, ChatAPI\n\nclient = HTTPClient()\nchat = ChatAPI(client)\n\n# Define tools\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    }\n]\n\n# Use tools in chat\nresponse = chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in San Francisco?\"}],\n    model=\"llama-3.3-70b\",\n    tools=tools\n)\n\n# Check for tool calls\nif response.choices[0].message.tool_calls:\n    for tool_call in response.choices[0].message.tool_calls:\n        print(f\"Function: {tool_call.function.name}\")\n        print(f\"Arguments: {tool_call.function.arguments}\")\n</code></pre>"},{"location":"advanced/function_calling/#multiple-tools","title":"Multiple Tools","text":"<pre><code>tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    },\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_stock_price\",\n            \"description\": \"Get the current stock price for a symbol\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"symbol\": {\n                        \"type\": \"string\",\n                        \"description\": \"The stock symbol, e.g. AAPL\"\n                    }\n                },\n                \"required\": [\"symbol\"]\n            }\n        }\n    }\n]\n\nresponse = chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in SF and the price of AAPL?\"}],\n    model=\"llama-3.3-70b\",\n    tools=tools\n)\n</code></pre>"},{"location":"advanced/function_calling/#tool-response-handling","title":"Tool Response Handling","text":"<pre><code>def handle_tool_call(tool_call):\n    if tool_call.function.name == \"get_weather\":\n        # Parse arguments\n        args = json.loads(tool_call.function.arguments)\n        location = args[\"location\"]\n\n        # Call weather API\n        weather = get_weather_api(location)\n\n        return {\n            \"role\": \"tool\",\n            \"tool_call_id\": tool_call.id,\n            \"name\": tool_call.function.name,\n            \"content\": json.dumps(weather)\n        }\n    elif tool_call.function.name == \"get_stock_price\":\n        # Handle stock price request\n        pass\n\n# Process tool calls\nif response.choices[0].message.tool_calls:\n    tool_responses = []\n    for tool_call in response.choices[0].message.tool_calls:\n        tool_response = handle_tool_call(tool_call)\n        tool_responses.append(tool_response)\n\n    # Continue conversation with tool responses\n    messages = response.choices[0].message.content + tool_responses\n    response = chat.complete(\n        messages=messages,\n        model=\"llama-3.3-70b\",\n        tools=tools\n    )\n</code></pre>"},{"location":"advanced/function_calling/#error-handling","title":"Error Handling","text":"<pre><code>from venice_sdk.errors import VeniceAPIError, InvalidRequestError\n\ntry:\n    response = chat.complete(\n        messages=[{\"role\": \"user\", \"content\": \"What's the weather?\"}],\n        model=\"llama-3.3-70b\",\n        tools=tools\n    )\nexcept InvalidRequestError as e:\n    print(f\"Invalid tool configuration: {e}\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"advanced/function_calling/#best-practices","title":"Best Practices","text":"<ol> <li>Tool Descriptions: Write clear, concise descriptions for each tool.</li> <li>Parameter Validation: Validate tool parameters before execution.</li> <li>Error Handling: Implement robust error handling for tool execution.</li> <li>Response Formatting: Format tool responses consistently.</li> <li>Tool Selection: Choose appropriate models that support function calling.</li> </ol>"},{"location":"advanced/function_calling/#example-complete-tool-integration","title":"Example: Complete Tool Integration","text":"<pre><code>class ToolHandler:\n    def __init__(self, chat: ChatAPI, tools: List[Dict]):\n        self.chat = chat\n        self.tools = tools\n\n    def process_message(self, message: str) -&gt; str:\n        # Initial completion\n        response = self.chat.complete(\n            messages=[{\"role\": \"user\", \"content\": message}],\n            model=\"llama-3.3-70b\",\n            tools=self.tools\n        )\n\n        # Handle tool calls\n        if response.choices[0].message.tool_calls:\n            tool_responses = []\n            for tool_call in response.choices[0].message.tool_calls:\n                tool_response = self.handle_tool_call(tool_call)\n                tool_responses.append(tool_response)\n\n            # Get final response\n            messages = response.choices[0].message.content + tool_responses\n            final_response = self.chat.complete(\n                messages=messages,\n                model=\"llama-3.3-70b\",\n                tools=self.tools\n            )\n            return final_response.choices[0].message.content\n\n        return response.choices[0].message.content\n\n    def handle_tool_call(self, tool_call):\n        # Implement tool-specific logic\n        pass\n\n# Usage\nhandler = ToolHandler(chat, tools)\nresponse = handler.process_message(\"What's the weather in SF and the price of AAPL?\")\nprint(response)\n</code></pre>"},{"location":"advanced/function_calling/#related","title":"Related","text":"<ul> <li>Chat API - Chat completion functionality</li> <li>Error Handling - Error handling best practices</li> <li>Streaming - Using streaming with function calls </li> </ul>"},{"location":"advanced/streaming/","title":"Streaming Responses","text":"<p>The Venice SDK supports streaming responses for chat completions, allowing you to receive and process tokens as they are generated.</p>"},{"location":"advanced/streaming/#basic-streaming","title":"Basic Streaming","text":"<pre><code>from venice_sdk import HTTPClient, ChatAPI\n\nclient = HTTPClient()\nchat = ChatAPI(client)\n\n# Get streaming response\nfor chunk in chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"Tell me a story\"}],\n    model=\"llama-3.3-70b\",\n    stream=True\n):\n    if chunk:\n        print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"advanced/streaming/#streaming-with-system-message","title":"Streaming with System Message","text":"<pre><code>for chunk in chat.complete(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Tell me a story\"}\n    ],\n    model=\"llama-3.3-70b\",\n    stream=True\n):\n    if chunk:\n        print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"advanced/streaming/#streaming-with-tools","title":"Streaming with Tools","text":"<pre><code>tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    }\n]\n\nfor chunk in chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in San Francisco?\"}],\n    model=\"llama-3.3-70b\",\n    tools=tools,\n    stream=True\n):\n    if chunk:\n        print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"advanced/streaming/#error-handling-with-streaming","title":"Error Handling with Streaming","text":"<pre><code>from venice_sdk.errors import VeniceAPIError, RateLimitError\n\ntry:\n    for chunk in chat.complete(\n        messages=[{\"role\": \"user\", \"content\": \"Tell me a story\"}],\n        model=\"llama-3.3-70b\",\n        stream=True\n    ):\n        if chunk:\n            print(chunk, end=\"\", flush=True)\nexcept RateLimitError:\n    print(\"\\nRate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"\\nAPI error: {e}\")\n</code></pre>"},{"location":"advanced/streaming/#best-practices","title":"Best Practices","text":"<ol> <li>Flush Output: Always use <code>flush=True</code> when printing chunks to ensure immediate display.</li> <li>Error Handling: Wrap streaming code in try-except blocks to handle errors gracefully.</li> <li>Resource Management: Consider using context managers for long-running streams.</li> <li>Buffer Management: For large responses, consider implementing a buffer to manage memory usage.</li> </ol>"},{"location":"advanced/streaming/#example-streaming-with-context-manager","title":"Example: Streaming with Context Manager","text":"<pre><code>class StreamingContext:\n    def __init__(self, chat: ChatAPI, messages: List[Dict[str, str]], model: str):\n        self.chat = chat\n        self.messages = messages\n        self.model = model\n\n    def __enter__(self):\n        return self.chat.complete(\n            messages=self.messages,\n            model=self.model,\n            stream=True\n        )\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n# Usage\nwith StreamingContext(chat, messages, \"llama-3.3-70b\") as stream:\n    for chunk in stream:\n        if chunk:\n            print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"advanced/streaming/#related","title":"Related","text":"<ul> <li>Chat API - Chat completion functionality</li> <li>Error Handling - Error handling best practices</li> <li>Function Calling - Using tools with streaming </li> </ul>"},{"location":"api/chat/","title":"Chat API Reference","text":"<p>The <code>ChatAPI</code> class provides a high-level interface for interacting with Venice's chat completion endpoint.</p>"},{"location":"api/chat/#chatapi","title":"ChatAPI","text":"<pre><code>class ChatAPI:\n    def __init__(self, client: HTTPClient)\n</code></pre>"},{"location":"api/chat/#parameters","title":"Parameters","text":"<ul> <li><code>client</code> (HTTPClient): An initialized HTTP client instance</li> </ul>"},{"location":"api/chat/#methods","title":"Methods","text":""},{"location":"api/chat/#complete","title":"complete","text":"<pre><code>def complete(\n    self,\n    messages: List[Dict[str, str]],\n    model: str = \"llama-3.3-70b\",\n    temperature: float = 0.7,\n    stream: bool = False,\n    max_tokens: Optional[int] = None,\n    tools: Optional[List[Dict]] = None,\n    venice_parameters: Optional[Dict] = None,\n    stop: Optional[Union[str, List[str]]] = None,\n    **kwargs\n) -&gt; Union[Dict, Generator[str, None, None]]\n</code></pre> <p>Generate a chat completion using the <code>chat/completions</code> endpoint.</p>"},{"location":"api/chat/#parameters_1","title":"Parameters","text":"<ul> <li><code>messages</code> (List[Dict[str, str]]): List of message dictionaries with 'role' and 'content' keys</li> <li><code>model</code> (str): ID of the model to use. Defaults to \"llama-3.3-70b\"</li> <li><code>temperature</code> (float): Sampling temperature (0-1). Defaults to 0.7</li> <li><code>stream</code> (bool): Whether to stream the response. Defaults to False</li> <li><code>max_tokens</code> (Optional[int]): Maximum number of tokens to generate</li> <li><code>tools</code> (Optional[List[Dict]]): List of tools available to the model</li> <li><code>venice_parameters</code> (Optional[Dict]): Additional Venice-specific parameters</li> <li><code>stop</code> (Optional[Union[str, List[str]]]): Stop sequences</li> <li><code>**kwargs</code>: Additional parameters passed to the API</li> </ul>"},{"location":"api/chat/#returns","title":"Returns","text":"<ul> <li>Union[Dict, Generator[str, None, None]]: Completion response (non-streaming) or a generator yielding content chunks (streaming)</li> </ul>"},{"location":"api/chat/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If inputs are invalid (e.g., empty messages or invalid temperature)</li> <li><code>VeniceAPIError</code>: Base exception for API errors</li> <li><code>UnauthorizedError</code>: Invalid or missing API key</li> <li><code>RateLimitError</code>: Rate limit exceeded</li> <li><code>InvalidRequestError</code>: Invalid request parameters</li> </ul>"},{"location":"api/chat/#examples","title":"Examples","text":""},{"location":"api/chat/#basic-chat-completion","title":"Basic Chat Completion","text":"<pre><code>from venice_sdk import HTTPClient, ChatAPI\n\nclient = HTTPClient()\nchat = ChatAPI(client)\n\nresponse = chat.complete(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    model=\"llama-3.3-70b\"\n)\n\nprint(response[\"choices\"][0][\"message\"][\"content\"]) \n</code></pre>"},{"location":"api/chat/#streaming-response","title":"Streaming Response","text":"<pre><code>for chunk in chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"Tell me a story\"}],\n    model=\"llama-3.3-70b\",\n    stream=True\n):\n    if chunk:\n        print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"api/chat/#function-calling","title":"Function Calling","text":"<pre><code>tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get the current weather in a location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\"\n                    }\n                },\n                \"required\": [\"location\"]\n            }\n        }\n    }\n]\n\nresponse = chat.complete(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in San Francisco?\"}],\n    model=\"llama-3.3-70b\",\n    tools=tools\n)\n</code></pre>"},{"location":"api/chat/#error-handling","title":"Error Handling","text":"<pre><code>from venice_sdk.errors import VeniceAPIError, RateLimitError\n\ntry:\n    response = chat.complete(...)\nexcept RateLimitError:\n    print(\"Rate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"api/chat/#related","title":"Related","text":"<ul> <li>Client API - Core HTTP client functionality</li> <li>Models API - Model discovery and management</li> <li>Errors - Error handling and exceptions </li> </ul>"},{"location":"api/client/","title":"Client API Reference","text":"<p>The <code>HTTPClient</code> class is the core of the SDK, handling authentication, retries, and HTTP requests to the Venice API.</p>"},{"location":"api/client/#httpclient","title":"HTTPClient","text":"<pre><code>class HTTPClient:\n    def __init__(self, config: Optional[Config] = None)\n</code></pre>"},{"location":"api/client/#parameters","title":"Parameters","text":"<ul> <li><code>config</code> (Optional[Config]): If not provided, configuration is loaded from environment via <code>load_config()</code>.</li> </ul>"},{"location":"api/client/#methods","title":"Methods","text":""},{"location":"api/client/#get","title":"get","text":"<pre><code>def get(self, endpoint: str, **kwargs) -&gt; requests.Response\n</code></pre> <p>Performs a GET request to the given <code>endpoint</code> (joined with the configured <code>base_url</code>).</p>"},{"location":"api/client/#post","title":"post","text":"<pre><code>def post(self, endpoint: str, data: Optional[Dict[str, Any]] = None, **kwargs) -&gt; requests.Response\n</code></pre> <p>Performs a POST request with JSON body <code>data</code>.</p>"},{"location":"api/client/#stream","title":"stream","text":"<pre><code>def stream(self, endpoint: str, data: Optional[Dict[str, Any]] = None, **kwargs) -&gt; Generator[str, None, None]\n</code></pre> <p>Performs a streaming POST request and yields string chunks.</p>"},{"location":"api/client/#error-handling","title":"Error handling","text":"<p>All methods raise SDK exceptions on errors: - <code>UnauthorizedError</code> for 401 - <code>RateLimitError</code> for 429 (includes optional <code>retry_after</code>) - <code>InvalidRequestError</code> for other client errors (including certain 404s) - <code>VeniceAPIError</code> for other API errors - <code>VeniceConnectionError</code> for transport-level failures</p>"},{"location":"api/client/#examples","title":"Examples","text":""},{"location":"api/client/#basic-usage","title":"Basic Usage","text":"<pre><code>from venice_sdk import HTTPClient\n\nclient = HTTPClient()  # Reads config from environment/.env\n\n# List models\nresp = client.get(\"models\")\nprint(resp.json())\n</code></pre>"},{"location":"api/client/#streaming-response","title":"Streaming Response","text":"<pre><code>from venice_sdk import HTTPClient\n\nclient = HTTPClient()\n\nfor chunk in client.stream(\n    \"chat/completions\",\n    data={\n        \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n        \"model\": \"llama-3.3-70b\",\n        \"stream\": True,\n    },\n):\n    print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"api/client/#error-handling_1","title":"Error Handling","text":"<pre><code>from venice_sdk.errors import VeniceAPIError, RateLimitError\n\nclient = HTTPClient()\n\ntry:\n    client.get(\"models\")\nexcept RateLimitError:\n    print(\"Rate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"api/client/#related","title":"Related","text":"<ul> <li>Chat API - Chat completion functionality</li> <li>Models API - Model discovery and management</li> <li>Errors - Error handling and exceptions</li> </ul>"},{"location":"api/errors/","title":"Errors API Reference","text":"<p>The <code>errors</code> module defines the exception hierarchy for the Venice SDK.</p>"},{"location":"api/errors/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>class VeniceError(Exception)\n    \u2514\u2500\u2500 VeniceAPIError\n        \u251c\u2500\u2500 UnauthorizedError\n        \u251c\u2500\u2500 RateLimitError\n        \u251c\u2500\u2500 InvalidRequestError\n        \u251c\u2500\u2500 ModelNotFoundError\n        \u251c\u2500\u2500 CharacterNotFoundError\n</code></pre>"},{"location":"api/errors/#exceptions","title":"Exceptions","text":""},{"location":"api/errors/#veniceapierror","title":"VeniceAPIError","text":"<p>Base exception for all Venice API errors.</p> <pre><code>class VeniceAPIError(VeniceError):\n    def __init__(self, message: str, status_code: int = None)\n</code></pre>"},{"location":"api/errors/#parameters","title":"Parameters","text":"<ul> <li><code>message</code> (str): Error message</li> <li><code>code</code> (Optional[str]): Error code from the API</li> </ul>"},{"location":"api/errors/#unauthorizederror","title":"UnauthorizedError","text":"<p>Raised when authentication fails.</p> <pre><code>class UnauthorizedError(VeniceAPIError):\n    pass\n</code></pre>"},{"location":"api/errors/#ratelimiterror","title":"RateLimitError","text":"<p>Raised when rate limits are exceeded.</p> <pre><code>class RateLimitError(VeniceAPIError):\n    def __init__(self, message: str, retry_after: int = None)\n</code></pre>"},{"location":"api/errors/#invalidrequesterror","title":"InvalidRequestError","text":"<p>Raised when the request is invalid.</p> <pre><code>class InvalidRequestError(VeniceAPIError):\n    pass\n</code></pre>"},{"location":"api/errors/#modelnotfounderror-and-characternotfounderror","title":"ModelNotFoundError and CharacterNotFoundError","text":"<p>Raised for specific 404 error codes.</p> <pre><code>class ModelNotFoundError(VeniceAPIError):\n    pass\n\nclass CharacterNotFoundError(VeniceAPIError):\n    pass\n</code></pre>"},{"location":"api/errors/#examples","title":"Examples","text":""},{"location":"api/errors/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>from venice_sdk import HTTPClient\nfrom venice_sdk.errors import VeniceAPIError, RateLimitError\n\nclient = HTTPClient()\n\ntry:\n    response = client.request(...)\nexcept RateLimitError:\n    print(\"Rate limit exceeded. Please try again later.\")\nexcept VeniceAPIError as e:\n    print(f\"API error: {e}\")\n</code></pre>"},{"location":"api/errors/#specific-error-handling","title":"Specific Error Handling","text":"<pre><code>from venice_sdk.errors import UnauthorizedError, InvalidRequestError\n\ntry:\n    response = client.request(...)\nexcept UnauthorizedError:\n    print(\"Authentication failed. Please check your API key.\")\nexcept InvalidRequestError as e:\n    print(f\"Invalid request: {e}\")\nexcept VeniceAPIError as e:\n    print(f\"Other API error: {e}\")\n</code></pre>"},{"location":"api/errors/#error-codes","title":"Error Codes","text":"<p>The SDK maps common error codes to specific exceptions:</p> Error Code Exception <code>MODEL_NOT_FOUND</code> <code>ModelNotFoundError</code> <code>CHARACTER_NOT_FOUND</code> <code>CharacterNotFoundError</code> (401) <code>UnauthorizedError</code> (429) <code>RateLimitError</code> Other 4xx <code>InvalidRequestError</code> Other &gt;=400 <code>VeniceAPIError</code>"},{"location":"api/errors/#related","title":"Related","text":"<ul> <li>Client API - Core HTTP client functionality</li> <li>Chat API - Chat completion functionality</li> <li>Models API - Model discovery and management </li> </ul>"},{"location":"api/models/","title":"Models API Reference","text":"<p>The <code>ModelsAPI</code> class provides functionality for discovering and managing available models via the <code>models</code> endpoint.</p>"},{"location":"api/models/#modelsapi","title":"ModelsAPI","text":"<pre><code>class ModelsAPI:\n    def __init__(self, client: HTTPClient)\n</code></pre>"},{"location":"api/models/#parameters","title":"Parameters","text":"<ul> <li><code>client</code> (HTTPClient): An initialized HTTPClient instance</li> </ul>"},{"location":"api/models/#methods","title":"Methods","text":""},{"location":"api/models/#list","title":"list","text":"<pre><code>def list(self) -&gt; List[Dict]\n</code></pre> <p>List all available models. Internally calls <code>GET models</code> and returns the <code>data</code> field.</p>"},{"location":"api/models/#returns","title":"Returns","text":"<ul> <li>List[Dict[str, Any]]: List of model dictionaries with their properties</li> </ul>"},{"location":"api/models/#raises","title":"Raises","text":"<ul> <li><code>VeniceAPIError</code>: Base exception for API errors</li> <li><code>UnauthorizedError</code>: Invalid or missing API key</li> <li><code>RateLimitError</code>: Rate limit exceeded</li> </ul>"},{"location":"api/models/#get","title":"get","text":"<pre><code>def get(self, model_id: str) -&gt; Dict\n</code></pre> <p>Get details for a specific model by first listing models and selecting the match.</p>"},{"location":"api/models/#parameters_1","title":"Parameters","text":"<ul> <li><code>model_id</code> (str): ID of the model to retrieve</li> </ul>"},{"location":"api/models/#returns_1","title":"Returns","text":"<ul> <li>Dict[str, Any]: Model details</li> </ul>"},{"location":"api/models/#raises_1","title":"Raises","text":"<ul> <li><code>VeniceAPIError</code>: Base exception for API errors (includes not found)</li> <li><code>UnauthorizedError</code>: Invalid or missing API key</li> <li><code>RateLimitError</code>: Rate limit exceeded</li> </ul>"},{"location":"api/models/#examples","title":"Examples","text":""},{"location":"api/models/#listing-all-models","title":"Listing All Models","text":"<pre><code>from venice_sdk import HTTPClient\nfrom venice_sdk.models import ModelsAPI\n\nclient = HTTPClient()\nmodels = ModelsAPI(client)\n\n# List all models\nall_models = models.list()\nfor model in all_models:\n    print(f\"Model: {model['id']}\")\n    print(f\"Type: {model['type']}\")\n    print(f\"Description: {model['model_spec']['modelSource']}\")\n    print(\"Capabilities:\")\n    print(f\"  - Function Calling: {model['model_spec']['capabilities']['supportsFunctionCalling']}\")\n    print(f\"  - Web Search: {model['model_spec']['capabilities']['supportsWebSearch']}\")\n    print(f\"  - Context Tokens: {model['model_spec']['availableContextTokens']}\")\n    print()\n</code></pre>"},{"location":"api/models/#getting-model-details","title":"Getting Model Details","text":"<pre><code># Get specific model details\nmodel_details = models.get(\"llama-3.3-70b\")\nprint(f\"Model: {model_details['id']}\")\nprint(f\"Type: {model_details['type']}\")\n</code></pre>"},{"location":"api/models/#filtering-models","title":"Filtering Models","text":"<pre><code># Filter for text models only\ntext_models = [m for m in models.list() if m['type'] == 'text']\nfor model in text_models:\n    print(f\"Text Model: {model['id']}\")\n</code></pre>"},{"location":"api/models/#error-handling","title":"Error Handling","text":"<pre><code>from venice_sdk.errors import VeniceAPIError\n\ntry:\n    model = models.get(\"nonexistent-model\")\nexcept VeniceAPIError as e:\n    print(f\"Error retrieving model: {e}\")\n</code></pre>"},{"location":"api/models/#model-properties-typical","title":"Model Properties (typical)","text":"<p>Common fields returned by the <code>models</code> endpoint include:</p> <ul> <li><code>id</code> (str): Unique identifier for the model</li> <li><code>type</code> (str): Type of model (e.g., \"text\")</li> <li><code>model_spec</code> (Dict): Specifications, including:</li> <li><code>availableContextTokens</code> (int)</li> <li><code>capabilities.supportsFunctionCalling</code> (bool)</li> <li><code>capabilities.supportsWebSearch</code> (bool)</li> </ul>"},{"location":"api/models/#related","title":"Related","text":"<ul> <li>Client API - Core HTTP client functionality</li> <li>Chat API - Chat completion functionality</li> <li>Errors - Error handling and exceptions </li> </ul>"}]}